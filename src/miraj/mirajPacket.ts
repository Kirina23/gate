import { Socket } from "net";
import * as win1251 from "windows-1251";

const SECRET_KEY = 26379124;

export enum MirajRequestCMD {
  TEST = "test",
  ARM = "arm",
  DISARM = "disarm",
}

export const getLogin = (): Buffer => {
  //admin123
  if (process.env.NEW_PASS) {
    return Buffer.from([
      0x4d, 0x4a, 0x47, 0x53, 0x02, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00,
      0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x07, 0x0d, 0x31, 0xa8,
      0x1f, 0xad, 0x14, 0xb8, 0xab, 0x86, 0x68, 0x9a, 0x8b, 0x07, 0x31, 0xf3,
      0x97, 0x4f, 0x4f, 0xd3, 0x50, 0x5a, 0x6f, 0x99, 0x96, 0x2b, 0x15, 0x98,
      0x7f, 0xd1, 0x7f, 0xbd, 0x3a,
    ]);
  }
  return Buffer.from([
    77, 74, 71, 83, 2, 0, 0, 0, 37, 0, 0, 0, 37, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 2, 0, 0, 0, 7, 13, 49, 168, 31, 173, 20, 184, 171, 134, 104,
    154, 139, 7, 49, 243, 151, 79, 79, 211, 80, 91, 111, 153, 150, 57, 21, 152,
    126, 213, 127, 189, 40,
  ]);
  // return Buffer.from([77, 74, 71, 83, 2, 0, 0, 0, 34, 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 13, 49, 161, 97, 173, 20, 61, 183, 134, 97, 193, 115, 7, 182, 251, 219, 126, 52, 71, 11, 44, 21, 205, 150, 168, 65, 79, 77, 236])
  //admin
  // return Buffer.from([77, 74, 71, 83, 2, 0, 0, 0, 34, 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 13, 49, 161, 97, 173, 20, 61, 183, 134, 97, 193, 115, 7, 182, 251, 219, 126, 51, 71, 11, 44, 107, 205, 150, 175, 93, 79, 77, 147])
  //
};

export const getPing = (): Buffer => {
  return Buffer.from([
    77, 74, 71, 83, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0,
  ]);
};

export const encodeMiraj = (
  buffer: number[] | Buffer,
  offset: number,
  key: number
): number[] => {
  const result = Array.isArray(buffer) ? [...buffer] : Array.from(buffer);
  for (let index = offset; index < result.length; index++) {
    let num = result[index] ^ (((key << 1) ^ (key << 4)) >> 24);
    num = num < 0 ? 256 + num : num;
    result[index] = num;
    if (num === 0) {
      num = num | 128;
    }
    if (num === 255) {
      num = num & 127;
    }
    key = (key << 8) | num;
  }
  return result;
};

export const getMirajCmdPacket = (
  objectId: number,
  cmd: MirajRequestCMD
): Buffer => {
  let prefix = [
    77,
    74,
    71,
    83,
    2,
    0,
    0,
    0,
    cmd === "test" ? 84 : 85,
    0,
    0,
    0,
    cmd === "test" ? 84 : 85,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    136,
    0,
    0,
    0,
    26,
    13,
    49,
    169,
  ];

  const cmdBuffer = [];
  switch (cmd) {
    case "test":
      cmdBuffer.push(8, 4008567246, 4243777762);
      break;
    case "arm":
      cmdBuffer.push(9, 3857769935, 4076857314);
      break;
    default:
      break;
  }
  const data = [
    1783153806,
    objectId,
    0,
    0,
    0,
    cmd === "test" ? 4 : 5,
    0,
    0,
    5,
    ...cmdBuffer,
    252,
    0,
    0,
    0,
    Math.round(Date.now() / 7434.48),
  ];
  const suffix =
    cmd === "test"
      ? [
          // 2, 32, 13, 13,
          8, 229, 7, 0, 255, 255, 255, 255,
        ]
      : [
          // 0, 47, 26, 13,
          13, 8, 229, 7, 0, 255, 255, 255, 255,
        ];

  const buffer = Buffer.from([
    ...prefix,
    ...new Array(data.length * 4),
    ...suffix,
  ]);
  for (let x = 0; x < data.length; x++) {
    buffer.writeUInt32LE(data[x], 36 + x * 4);
  }
  const result = encodeMiraj(buffer, 36, SECRET_KEY);
  const packet = new MirajPacket(result);
  console.log("decoded", packet.toJSON());
  return Buffer.from(result);
};

export class MirazhPacketRequest {
  buffer: Buffer;
  deviceId: number;
  cmd: MirajRequestCMD;
  timeout?: number;
  constructor(deviceId: number, cmd: MirajRequestCMD, timeout?: number) {
    const template = Buffer.from([
      77,
      74,
      71,
      83,
      2,
      0,
      0,
      0,
      76,
      0,
      0,
      0,
      //12
      76,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      //24
      0,
      0,
      0,
      0,
      136,
      0,
      0,
      0,
      26,
      13,
      49,
      169,
      //36
      142,
      196,
      72,
      106,
      0,
      0,
      0,
      0,
      //48
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      //60
      cmd === MirajRequestCMD.TEST ? 4 : cmd === MirajRequestCMD.ARM ? 5 : 12,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      //72
      5,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      //84
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      //96
      0,
      0,
      0,
      0,
      8,
      229,
      7,
      0,
      255,
      255,
      255,
      255,
    ]);
    template.writeUInt32LE(deviceId, 40);
    template.writeUInt32LE(Math.round(Date.now() / 5382), 96);
    // console.log('template', [...template])
    this.buffer = Buffer.from(encodeMiraj(template, 36, SECRET_KEY));
    this.cmd = cmd;
    this.deviceId = deviceId;
    this.timeout = timeout;
  }
}

export class MirajPacket {
  private rawBuffer: Buffer;
  private decodedBuffer: number[];
  private packetType: number;
  private totalDataSize: number;
  private dataSize: number;
  private info: number;
  private count: number;
  private number: number;
  private cmdType: number;
  private error: number;
  constructor(buffer: Buffer | number[]) {
    // if (buffer.length === 112) {
    console.log([...buffer].join(", "));
    // }
    this.rawBuffer = Array.isArray(buffer) ? Buffer.from(buffer) : buffer;
    this.decodedBuffer = this.decode(buffer, 36, SECRET_KEY);
    this.packetType = this.rawBuffer.readUInt32LE(4);
    this.totalDataSize = this.rawBuffer.readUInt32LE(8);
    this.dataSize = this.rawBuffer.readUInt32LE(12);
    this.info = this.rawBuffer.readUInt32LE(16);
    this.count = this.rawBuffer.readUInt32LE(20);
    this.number = this.rawBuffer.readUInt32LE(24);
    this.cmdType =
      this.rawBuffer.length > 32 ? this.rawBuffer.readUInt32LE(28) : 0;
    this.error =
      this.rawBuffer.length > 40 ? this.rawBuffer.readUInt32LE(32) : 0;
  }

  decode(buffer: number[] | Buffer, offset: number, key: number): number[] {
    const result = Array.isArray(buffer) ? [...buffer] : Array.from(buffer);
    for (let index = offset; index < result.length; index++) {
      let num1 = ((key << 1) ^ (key << 4)) >> 24;
      let num2 = result[index];
      if (num2 === 0) {
        num2 = num2 | 128;
      }
      if (num2 === 255) {
        num2 = num2 & 127;
      }
      key = (key << 8) | num2;
      const temp = result[index] ^ num1;
      result[index] = temp < 0 ? 256 + temp : temp;
      // console.log('temp', temp, 'result[index]', result[index]);
    }
    return result;
  }

  encode(buffer: number[] | Buffer, offset: number, key: number): number[] {
    const result = Array.isArray(buffer) ? [...buffer] : Array.from(buffer);
    for (let index = offset; index < result.length; index++) {
      let num = result[index] ^ (((key << 1) ^ (key << 4)) >> 24);
      num = num < 0 ? 256 + num : num;
      result[index] = num;
      if (num === 0) {
        num = num | 128;
      }
      if (num === 255) {
        num = num & 127;
      }
      key = (key << 8) | num;
    }
    return result;
  }

  toJSON() {
    const decodedBuf = this.decodedBuffer.slice(32);
    const buff = Buffer.from(decodedBuf);
    let result = [];
    for (let x = 0; x < buff.length - 3; x = x + 4) {
      result.push(buff.readUInt32LE(x));
    }
    return {
      // rawBuffer: [...this.rawBuffer],
      packetType: this.packetType,
      totalDataSize: this.totalDataSize,
      dataSize: this.dataSize,
      info: this.info,
      count: this.count,
      number: this.number,
      size: decodedBuf.length,
      cmdType: this.cmdType,
      error: this.error,
      result,
      // decodedBuffer: this.decodedBuffer,
      date: Date.now(),
      decodedBuf,
      win1251: win1251.decode(Buffer.from(decodedBuf).toString("binary")),
      // utf8: Buffer.from(decodedBuf).toString('utf8'),
      // ascii: Buffer.from(decodedBuf).toString('ascii'),
      plainWin1251: win1251.decode(
        Buffer.from(this.rawBuffer).toString("binary")
      ),
      // encodeBuffer: this.encode(this.decodedBuffer, 0, SECRET_KEY)
    };
  }
}
const arr2 = [
  0x4d, 0x4a, 0x47, 0x53, 0x02, 0x00, 0x00, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x4c,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x1a, 0x0d, 0x31, 0xa9, 0x94, 0xc9, 0x79,
  0xca, 0x64, 0x05, 0x6f, 0x32, 0x88, 0x5c, 0x2d, 0x4d, 0x95, 0x7a, 0x8e, 0x42,
  0x82, 0xa2, 0x07, 0x52, 0x2a, 0x64, 0x7b, 0x86, 0xf2, 0x8f, 0x4f, 0x62, 0xcd,
  0xea, 0x68, 0xe9, 0x40, 0x72, 0x5f, 0x46, 0x87, 0xc1, 0x4a, 0xe5, 0x73, 0x96,
  0x3b, 0x9d, 0xde, 0x4f, 0xce, 0xe6, 0x58, 0x63, 0x73, 0xa9, 0x36, 0xf1, 0xdd,
  0xc1, 0x1b, 0xe8, 0x6b, 0x9d, 0x8e, 0xb3, 0x69, 0xe3, 0x09, 0xaf, 0xb2, 0x09,
];
const arr = [
  0x4d, 0x4a, 0x47, 0x53, 0x02, 0x00, 0x00, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x4c,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x1a, 0x0d, 0x31, 0xa9, 0x94, 0xc9, 0x79,
  0xca, 0x32, 0x01, 0x6f, 0x37, 0x44, 0x14, 0x2d, 0x1a, 0xc9, 0x6a, 0x8b, 0x99,
  0x04, 0x7d, 0xae, 0xa2, 0x43, 0x21, 0xb7, 0x60, 0xb4, 0x58, 0x18, 0xca, 0x2d,
  0x31, 0xbd, 0x36, 0x8c, 0x78, 0xa9, 0x05, 0xdf, 0x7b, 0xc2, 0x56, 0x49, 0x4b,
  0xa1, 0xc8, 0x06, 0x2d, 0x5f, 0x10, 0x6e, 0x8f, 0x4f, 0x26, 0x35, 0xea, 0x6c,
  0x2f, 0x0e, 0x65, 0x0b, 0xb2, 0xf2, 0x7e, 0xab, 0x4a, 0x3c, 0xe8, 0x1d, 0xc8,
];
const login = [
  0x4d, 0x4a, 0x47, 0x53, 0x02, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x1f,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0d, 0x0d, 0x31, 0xa8, 0xab, 0xad, 0x14,
  0xb2, 0x83, 0x86, 0x68, 0x2c, 0x5b, 0x07, 0x3b, 0xf3, 0x0b, 0x77, 0xf9, 0xdb,
  0xab, 0xa3, 0x5c, 0x3a, 0xdb, 0x4a, 0x48,
];

const perevzyatie2 = [
  0x4d, 0x4a, 0x47, 0x53, 0x02, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x69, 0x00, 0x00, 0x00, 0x18, 0x0d, 0x31, 0xa9, 0x4f, 0x36, 0x86,
  0x39,
];

const perevzyatie1 = [
  0x4d, 0x4a, 0x47, 0x53, 0x02, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x69, 0x00, 0x00, 0x00, 0x1b, 0x0d, 0x31, 0xa9, 0x79, 0x36, 0x86,
  0x3a,
];

const obnovit1 = [
  0x4d, 0x4a, 0x47, 0x53, 0x02, 0x00, 0x00, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x4c,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x1a, 0x0d, 0x31, 0xa9, 0x94, 0xc9, 0x79,
  0xca, 0x64, 0x05, 0x6f, 0x32, 0x88, 0x5c, 0x2d, 0x4d, 0x95, 0x7a, 0x8e, 0x42,
  0x82, 0xa2, 0x07, 0x52, 0x2b, 0x64, 0x7b, 0x86, 0xe0, 0x8f, 0x4f, 0x63, 0xc9,
  0xea, 0x68, 0xfb, 0x08, 0x72, 0x5e, 0x46, 0x97, 0xc1, 0x58, 0xe4, 0x53, 0x97,
  0x3f, 0x8d, 0x9e, 0x5d, 0x87, 0xc2, 0xd9, 0x63, 0x73, 0xa8, 0x24, 0xf1, 0xdd,
  0xd2, 0x21, 0xc9, 0x77, 0x88, 0x58, 0xe0, 0x90, 0x95, 0xc0, 0x37, 0xd7, 0x88,
];

const obnovit2 = [
  0x4d, 0x4a, 0x47, 0x53, 0x02, 0x00, 0x00, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x4c,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x1a, 0x0d, 0x31, 0xa9, 0x94, 0xc9, 0x79,
  0xca, 0x67, 0x05, 0x6f, 0x32, 0xbe, 0x5c, 0x2d, 0x4e, 0x99, 0x7a, 0x8e, 0x74,
  0x5a, 0xa2, 0x04, 0x52, 0x1b, 0x64, 0x4d, 0x85, 0x80, 0x8c, 0x43, 0x53, 0x09,
  0xdc, 0xb3, 0x96, 0x8b, 0x72, 0x5e, 0x45, 0xa1, 0xc1, 0x58, 0xd1, 0x5f, 0x97,
  0x3c, 0xb7, 0x46, 0x5d, 0xb2, 0x1a, 0xe9, 0x60, 0x45, 0x9b, 0x44, 0xc4, 0xd2,
  0x82, 0xc8, 0xff, 0x9c, 0x27, 0x10, 0xe3, 0xfd, 0x3f, 0xd0, 0x07, 0xd6, 0x7d,
];
const obnovit3 = [
  0x4d, 0x4a, 0x47, 0x53, 0x02, 0x00, 0x00, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x4c,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x1a, 0x0d, 0x31, 0xa9, 0x94, 0xc9, 0x79,
  0xca, 0x66, 0x05, 0x6f, 0x32, 0xac, 0x5c, 0x2d, 0x4f, 0x9d, 0x7a, 0x8e, 0x66,
  0x12, 0xa2, 0x05, 0x52, 0x0b, 0x64, 0x5f, 0x84, 0xa0, 0x8d, 0x47, 0x43, 0x49,
  0xce, 0xfa, 0xb2, 0x0a, 0x72, 0x5e, 0x44, 0xb3, 0xc1, 0x58, 0xc2, 0x5b, 0x97,
  0x3d, 0xa1, 0x0e, 0x5d, 0xa1, 0x52, 0xf9, 0x61, 0x57, 0x8a, 0x64, 0xd7, 0xd7,
  0xb2, 0xa8, 0xdf, 0xc6, 0x41, 0xdb, 0xa6, 0xef, 0x9e, 0xf2, 0xdc, 0xd9, 0x2d,
];

// getMirajCmdPacket(1, 'arm');

// const packet1 = new MirajPacket(obnovit1);
// // const packetLogin = new MirajPacket(login);
// // console.log('org packet', arr)
// console.log('packet1', packet1.toJSON());
// const packet2 = new MirajPacket(obnovit2);
// console.log('packet2', packet2.toJSON());
// const packet3 = new MirajPacket(obnovit3);
// console.log('packet3', packet3.toJSON());
// // console.log(perevzyatie1.slice(28))
// // console.log(perevzyatie2.slice(28))
// // console.log('sig', encode([0x08, 0x53, 0xed, 0xd9], 0, SECRET_KEY));
// console.log('obnovit3', obnovit3)
// console.log('packetLogin', packetLogin.toJSON());

// let socket = new Socket();
// socket.on('connect', () => {
//     console.log('sent login')
//     socket.write(Buffer.from(login));
// });
// socket.on('data', (msg) => {

//     const recieve = new MirajPacket(msg);
//     // console.log([...msg].map(item => '0x'+item.toString(16)));
//     console.log('recieve msg', recieve.toJSON());
// })
// socket.connect(5000, '10.10.99.245');
// setTimeout(() => {
//     console.log('sent request');
//     socket.write(Buffer.from(arr2));
//     // socket.write(Buffer.from([0x4d, 0x4a, 0x47, 0x53,
//     //     0x02, 0x00, 0x00, 0x00, 0x04,0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     //     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00,
//     // ]))
// },200)

// console.log(new MirajPacket(getLogin()).toJSON());
// console.log(
//   new MirajPacket([
//     0x4d, 0x4a, 0x47, 0x53, 0x02, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00,
//     0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x07, 0x0d, 0x31, 0xa8,
//     0x1f, 0xad, 0x14, 0xb8, 0xab, 0x86, 0x68, 0x9a, 0x8b, 0x07, 0x31, 0xf3,
//     0x97, 0x4f, 0x4f, 0xd3, 0x50, 0x5a, 0x6f, 0x99, 0x96, 0x2b, 0x15, 0x98,
//     0x7f, 0xd1, 0x7f, 0xbd, 0x3a,
//   ]).toJSON()
// );
